ROOT               := `dirname $(dirname $(dirname $PWD))`
TEST_SERVER_PORT   := env_var_or_default("TEST_SERVER_PORT", "3000")
# Needed because local execution of node scripts actually creates a script far away from the local node_modules
export NODE_PATH   := `pwd`+ "/../node_modules"
export JEKYLL_ENV  := env_var_or_default("JEKYLL_ENV", "production")
parcel             := "./node_modules/parcel-bundler/bin/cli.js"
tsc                := "./node_modules/typescript/bin/tsc"
# minimal formatting, bold is very useful
bold               := '\033[1m'
normal             := '\033[0m'

_help:
    @just --list --unsorted --list-heading $'Commands:\n'

# Builds everything, run the tests. args: see test.js
@test +args="": generate build
    echo -e "üç≥üëâ {{bold}}node test.js {{args}}{{normal}}"
    node test.js {{args}}

@dev:
    if [ ! -f /.dockerenv ]; then \
        just _ensureDeno ; \
        deno run --unstable --allow-all https://deno.land/x/metapages@v0.0.17/exec/open_url.ts http://localhost:{{TEST_SERVER_PORT}}/?VERSION=latest; \
    fi
    @watchexec --restart \
        --watch ../src \
        --watch ./page/index.template.html \
        --watch ./page/metaframe \
        --watch ./page/css \
        --watch ../justfile \
        --watch justfile \
        -- 'JEKYLL_ENV=$JEKYLL_ENV just build testing  && just serve'

# watch all files and rebuild the tests and run them, on every change. Does NOT automatically build meta(page+frame) modules
watch testing="": (build testing) _watch
# watch, but assume we have already built assets
_watch testing="":
    @# Watch for any changes to local test machinery, AND for updates to metapage/frame libraries in page/js/meta*
    watchexec --exts js,json,html,justfile --ignore node_modules --ignore page/index.html --restart -- just test

# build meta(page/frame) browser modules for testing
@build testing="":
    just ../_build_browser_modules test/page/js {{testing}}
    just generate "{{testing}}"
    rm -rf ../../docs/pages/test
    # Update the test site, so the docs contain out public commitment to version compatability
    # If this directory does not exist, then we are in an isolated docker container, not in the repo
    if [ -d ../../docs/pages ]; then \
        cp -r page ../../docs/pages/test; \
        echo -e "‚úÖ ../../docs/pages/test"; \
    fi

# Use with '<libs/> just watch' and manually refresh the browser
serve:
    watchexec --restart --watch ./lib.js --watch ./test.js --watch ./page/index.template.html --watch ./page/metaframe/index.html -- just _serve

_serve: (generate "testing")
    #!/usr/bin/env node
    console.log("üç≥üëâ {{bold}}test/serve{{normal}}")
    const path = require('path'); const lib = require(path.join(process.cwd(), './lib'));
    (async () => {
        try {
            await lib.createServer({{TEST_SERVER_PORT}});
        } catch(err) {
            console.error(err);
            process.exit(1);
        }
        console.log('‚úÖ server listening on http://localhost:{{TEST_SERVER_PORT}}');
    })()

# generates the test index.html from a template, processing all the valid npm lib versions
generate environment="production":
    #!/usr/bin/env node
    console.log("üç≥üëâ {{bold}}test/generate {{environment}}{{normal}}")
    const path = require('path'); const lib = require(path.join(process.cwd(), './lib'));
    (async () => {
        try {
            await lib.generate({environment:"{{environment}}"});
        } catch(err) {
            console.error(err);
            process.exit(1);
        }
        console.log('‚úÖ created page/index.html');
    })()

@clean:
    rm -rf page/js/meta*
    rm -rf page/index.html

# deno check
@_ensureDeno:
    if ! command -v deno &> /dev/null; then echo 'üí• denoüí• is not installed: https://deno.land/manual/getting_started/installation'; exit 1; fi
